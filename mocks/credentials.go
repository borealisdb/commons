// Code generated by MockGen. DO NOT EDIT.
// Source: credentials/credentials.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	credentials "github.com/borealisdb/commons/credentials"
	gomock "github.com/golang/mock/gomock"
)

// MockCredentials is a mock of Credentials interface.
type MockCredentials struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsMockRecorder
}

// MockCredentialsMockRecorder is the mock recorder for MockCredentials.
type MockCredentialsMockRecorder struct {
	mock *MockCredentials
}

// NewMockCredentials creates a new mock instance.
func NewMockCredentials(ctrl *gomock.Controller) *MockCredentials {
	mock := &MockCredentials{ctrl: ctrl}
	mock.recorder = &MockCredentialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentials) EXPECT() *MockCredentialsMockRecorder {
	return m.recorder
}

// GetClusterCredentials mocks base method.
func (m *MockCredentials) GetClusterCredentials(ctx context.Context, clusterName string, args credentials.Options) (credentials.GetClusterCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterCredentials", ctx, clusterName, args)
	ret0, _ := ret[0].(credentials.GetClusterCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterCredentials indicates an expected call of GetClusterCredentials.
func (mr *MockCredentialsMockRecorder) GetClusterCredentials(ctx, clusterName, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterCredentials", reflect.TypeOf((*MockCredentials)(nil).GetClusterCredentials), ctx, clusterName, args)
}

// GetClusterEndpoint mocks base method.
func (m *MockCredentials) GetClusterEndpoint(ctx context.Context, clusterName, role string) (credentials.GetClusterEndpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterEndpoint", ctx, clusterName, role)
	ret0, _ := ret[0].(credentials.GetClusterEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterEndpoint indicates an expected call of GetClusterEndpoint.
func (mr *MockCredentialsMockRecorder) GetClusterEndpoint(ctx, clusterName, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterEndpoint", reflect.TypeOf((*MockCredentials)(nil).GetClusterEndpoint), ctx, clusterName, role)
}

// GetPostgresCredentials mocks base method.
func (m *MockCredentials) GetPostgresCredentials(ctx context.Context, clusterName, username string, options credentials.Options) (credentials.GetPostgresCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresCredentials", ctx, clusterName, username, options)
	ret0, _ := ret[0].(credentials.GetPostgresCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresCredentials indicates an expected call of GetPostgresCredentials.
func (mr *MockCredentialsMockRecorder) GetPostgresCredentials(ctx, clusterName, username, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresCredentials", reflect.TypeOf((*MockCredentials)(nil).GetPostgresCredentials), ctx, clusterName, username, options)
}

// GetPostgresSSLRootCert mocks base method.
func (m *MockCredentials) GetPostgresSSLRootCert(ctx context.Context, clusterName string, options credentials.Options) (credentials.GetPostgresSSLRootCertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresSSLRootCert", ctx, clusterName, options)
	ret0, _ := ret[0].(credentials.GetPostgresSSLRootCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresSSLRootCert indicates an expected call of GetPostgresSSLRootCert.
func (mr *MockCredentialsMockRecorder) GetPostgresSSLRootCert(ctx, clusterName, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresSSLRootCert", reflect.TypeOf((*MockCredentials)(nil).GetPostgresSSLRootCert), ctx, clusterName, options)
}

// Init mocks base method.
func (m *MockCredentials) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockCredentialsMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockCredentials)(nil).Init))
}
